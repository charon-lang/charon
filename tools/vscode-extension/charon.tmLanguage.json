{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Charon",
    "patterns": [
        {
            "name": "meta.module.charon",
            "match": "(module)\\s+([_[:alpha:]][_[:alnum:]]*)",
            "captures": {
                "1": { "name": "keyword.other.charon storage.type.charon" },
                "2": { "name": "entity.name.module.charon" }
            }
        },
        {
            "name": "meta.import.charon",
            "begin": "\\b(extern)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.charon storage.type.charon"
                }
            },
            "end": ";",
            "endCaptures": {
                "0": {
                    "name": "punctuation.semi.charon"
                }
            },
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#function-definition"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#types"
                },
                {
                    "include": "#punctuation"
                }
            ]
        },
        {
            "include": "#comments"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#function-definition"
        },
        {
            "include": "#function-call"
        },
        {
            "include": "#types"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#selector"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#variable"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.charon",
                    "begin": "/\\*",
                    "end": "\\*/"
                },
                {
                    "name": "comment.line.charon",
                    "match": "//.*\n"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.other.capitalized.charon",
                    "match": "\\b[_A-Z][_A-Z0-9]+\\b"
                },
                {
                    "name": "constant.numeric.decimal.charon",
                    "match": "\\b\\d+\\b"
                },
                {
                    "name": "constant.numeric.hex.charon",
                    "match": "\\b0x[\\d[:alpha:]]+\\b"
                },
                {
                    "name": "constant.numeric.octal.charon",
                    "match": "\\b0o[0-7]+\\b"
                },
                {
                    "name": "constant.numeric.binary.charon",
                    "match": "\\b0b[0-1]+\\b"
                },
                {
                    "name": "constant.language.bool.charon",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "escape": {
            "name": "constant.character.escape.charon",
            "match": "\\\\."
        },
        "function-definition": {
            "name": "meta.function.definition.charon",
            "begin": "\\b(fn)\\s+([_[:alpha:]][_[:alnum:]]*)\\s*(\\()",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.charon"
                },
                "2": {
                    "name": "entity.name.function.charon"
                },
                "3": {
                    "name": "punctuation.brackets.round.charon"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.bracket.round.charon"
                }
            },
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#constants"
                },
                {
                    "include": "#selector"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#types"
                },
                {
                    "include": "#variable"
                }
            ]
        },
        "function-call": {
            "name": "meta.function.call.charon",
            "begin": "([_[:alpha:]][_[:alnum:]]*)(\\()",
            "beginCaptures": {
                "1": { "name": "entity.name.function.charon" },
                "2": { "name": "punctuation.brackets.round.charon" }
            },
            "end": "\\)",
            "endCaptures": {
                "0": { "name": "punctuation.brackets.round.charon" }
            },
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#constants"
                },
                {
                    "include": "#function-definition"
                },
                {
                    "include": "#function-call"
                },
                {
                    "include": "#selector"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#types"
                },
                {
                    "include": "#variable"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "entity.name.type.numeric.charon",
                    "match": "(?:uint|u8|u16|u32|u64|int|i8|i16|i32|i64)"
                },
                {
                    "name": "entity.name.type.primitive.charon",
                    "match": "(?:char|bool|ptr)"
                },
                {
                    "name": "meta.declaration.type.charon",
                    "match": "\\b(type)\\s+([_[:alpha:]][_[:alnum:]]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.declaration.type.charon storage.type.charon"
                        },
                        "2": {
                            "name": "entity.name.type.declaration.charon"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.charon",
                    "match": "\\b(?:return|if|else|while)\\b"
                },
                {
                    "name": "keyword.other.charon storage.type.charon",
                    "match": "\\b(?:extern|let|module)\\b"
                },
                {
                    "name": "keyword.declaration.type.charon storage.type.charon",
                    "match": "\\b(?:type|struct)\\b"
                },
                {
                    "name": "keyword.other.charon",
                    "match": "\\b(?:as|fn)\\b"
                }
            ]
        },
        "selector": {
            "name": "meta.selector.charon",
            "match": "([_[:alpha:]][_[:alnum:]]*)::",
            "captures": {
                "1": {
                    "name": "entity.name.selector.charon"
                }
            }
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.comma.charon",
                    "match": ","
                },
                {
                    "name": "punctuation.brackets.brace.charon",
                    "match": "[{}]"
                },
                {
                    "name": "punctuation.brackets.square.charon",
                    "match": "[\\[\\]]"
                },
                {
                    "name": "punctuation.brackets.round.charon",
                    "match": "[()]"
                },
                {
                    "name": "punctuation.brackets.angle.charon",
                    "match": "[<>]"
                },
                {
                    "name": "punctuation.semi.charon",
                    "match": ";"
                },
                {
                    "name": "punctuation.star.charon",
                    "match": "\\*"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.normal.charon",
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.charon"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.charon"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escape"
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.raw.charon",
                    "begin": "''",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.raw.charon"
                        }
                    },
                    "end": "''",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.raw.charon"
                        }
                    }
                },
                {
                    "name": "string.quoted.single.char.charon",
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.char.charon"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.char.charon"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escape"
                        }
                    ]
                }
            ]
        },
        "variable": {
            "name": "variable.other.charon",
            "match": "\\b[_[:alpha:]][_[:alnum:]]*\\b"
        }
    },
    "scopeName": "source.charon"
}